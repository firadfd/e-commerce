name: Flutter CI/CD

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  android-build:
    name: Build Android
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2.12.0
        with:
          # This version was updated to a newer version (3.32.8)
          # to meet the project's Dart SDK requirements as suggested by the error log.
          flutter-version: '3.32.8'
          cache: true

      - name: Verify Flutter Setup
        run: |
          flutter --version
          echo "Flutter setup completed for version 3.32.8"

      - name: Install dependencies
        run: flutter pub get

      - name: Set up key.properties
        run: |
          # The working-directory is already 'android', so we don't need to specify 'android/'.
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" > key.properties
          echo "storePassword=${{ secrets.STORE_PASSWORD }}" >> key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> key.properties
          echo "${{ secrets.STORE_FILE_CONTENT }}" | base64 --decode > key.jks
        working-directory: ./android

      - name: Set up local.properties
        run: |
          # The working-directory is already 'android', so we don't need to specify 'android/'.
          echo "flutter.sdk=$FLUTTER_ROOT" > local.properties
        working-directory: ./android

      - name: Build Release AAB and APK
        run: |
          flutter build appbundle --release
          flutter build apk --release

      - name: Upload AAB Artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-aab
          path: build/app/outputs/bundle/release/app-release.aab
          retention-days: 7

      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: build/app/outputs/flutter-apk/app-release.apk
          retention-days: 7

      - name: Upload APK to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          files: build/app/outputs/flutter-apk/app-release.apk
        env:
          # Corrected the secret name to the standard GITHUB_TOKEN
          GITHUB_TOKEN: ${{ secrets.TOKEN }}

  ios-build:
    name: Build iOS
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2.12.0
        with:
          flutter-version: '3.32.8'
          cache: true

      - name: Verify Flutter Setup
        run: |
          flutter --version
          echo "Flutter setup completed for version 3.32.8"

      - name: Install dependencies
        run: flutter pub get

      - name: Install CocoaPods
        run: |
          sudo gem install cocoapods
          pod setup

      - name: Set up iOS Code Signing
        env:
          P12_BASE64: ${{ secrets.P12_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          PROVISIONING_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: your_temporary_keychain_password # Choose a strong temporary password here
        run: |
          # 1. Create a temporary keychain
          KEYCHAIN_PATH=$RUNNER_TEMP/build.keychain-db
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security default-keychain -s "$KEYCHAIN_PATH"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security set-keychain-settings -t 3600 -l "$KEYCHAIN_PATH" # Set timeout for 1 hour
          security list-keychains # Verify the keychain is set

          # 2. Decode and import the .p12 certificate
          # Ensure no trailing newlines in the secret by using `echo -n`
          echo -n "$P12_BASE64" | base64 --decode > "$RUNNER_TEMP/certificate.p12"
          security import "$RUNNER_TEMP/certificate.p12" -k "$KEYCHAIN_PATH" -P "$P12_PASSWORD" -T /usr/bin/codesign -T /usr/bin/security || { echo "Certificate import failed!"; exit 1; }
          rm "$RUNNER_TEMP/certificate.p12"

          # 3. Decode and install the provisioning profile
          PROVISIONING_PROFILE_PATH="$RUNNER_TEMP/profile.mobileprovision"
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo -n "$PROVISIONING_PROFILE_BASE64" | base64 --decode > "$PROVISIONING_PROFILE_PATH"
          mv "$PROVISIONING_PROFILE_PATH" ~/Library/MobileDevice/Provisioning\ Profiles/

          # Verify provisioning profile installation (optional, but good for debugging)
          ls -l ~/Library/MobileDevice/Provisioning\ Profiles/

          # Add certificate to search list
          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH" || { echo "Failed to set key partition list!"; exit 1; }
        # The working-directory here is relative to the root of the checkout
        # If your .p12 and .mobileprovision are not directly in ./ios, adjust paths
        working-directory: ./ios

      - name: Update Info.plist for build number (Optional, but good practice)
        run: |
          PLIST_PATH="Runner/Info.plist"
          BUILD_NUMBER=$(date +%s)
          /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $BUILD_NUMBER" "$PLIST_PATH"
          echo "Set CFBundleVersion to $BUILD_NUMBER"
        working-directory: ./ios

      - name: Build iOS Archive (IPA)
        run: flutter build ipa --release
        env:
          FLUTTER_BUILD_IOS_CODESIGN_IDENTITY: "Apple Distribution: Your Company Name (XXXXXXXXXX)"
          FLUTTER_BUILD_IOS_TEAM_ID: "YOUR_TEAM_ID"

      - name: Upload IPA Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-ipa
          path: build/ios/archive/Runner.xcarchive/Products/Applications/*.ipa
          retention-days: 7

      - name: Upload IPA to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          files: build/ios/archive/Runner.xcarchive/Products/Applications/*.ipa
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
